name: "Build Tauri"

on:
  push:
    tags:
      - "tauri-v*"
jobs:
  # create-release:
  #   runs-on: ubuntu-latest

  #   outputs:
  #     release_id: ${{ steps.create-release.outputs.result }}

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Setup NodeJS
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: 16

  #     - name: Get Version
  #       run: echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_ENV

  #     - name: Create Github Release
  #       id: create-release
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           const { data } = await github.rest.repos.createRelease({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             tag_name: `app-v${process.env.PACKAGE_VERSION}`,
  #             name: `Github Actions Test v${process.env.PACKAGE_VERSION}`,
  #             body: 'Take a look at the assets to download and install this app.',
  #             draft: true,
  #             prerelease: false
  #           })

  #           return data.id

  build-tauri:
    # needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      # Enter Workspace
      - run: cd tauri
      # Setup VM
      - uses: actions/checkout@v3

      - name: Setup NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Install Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install Dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf

      - name: Install Project Dependecies
        run: yarn

      - name: Install Tauri CLI
        run: yarn add -D @tauri-apps/cli

      - name: Build Web
        run: yarn build

      # Build
      - name: Build (MacOS)
        if: matrix.platform == 'macos-latest'
        run: |
          rustup -q target add aarch64-apple-darwin
          yarn tauri build --target aarch64-apple-darwin
          yarn tauri build --target x86_64-apple-darwin

      - name: Build (Windows)
        if: matrix.platform == 'windows-latest'
        run: yarn tauri build

      # Compress Assets (MacOS)
      - name: Compress Assets (MacOS Only)
        if: matrix.platform == 'macos-latest'
        run: |
          tar czf github-actions-test-m1.app.tar.gz -C src-tauri/target/aarch64-apple-darwin/release/bundle/macos github-actions-test.app
          tar czf github-actions-test-intel.app.tar.gz -C src-tauri/target/x86_64-apple-darwin/release/bundle/macos github-actions-test.app

      # Release
      - name: Release
        uses: ncipollo/release-action@v1.10.0
        with:
          artifacts: "github-actions-test-m1.app.tar.gz,github-actions-test-intel.app.tar.gz"
          token: ${{ secrets.GITHUB_TOKEN }}

  # publish-release:
  #   runs-on: ubuntu-latest
  #   needs: [create-release, build-tauri]

  #   steps:
  #     - name: Publish Release
  #       id: publish-release
  #       uses: actions/github-script@v6
  #       env:
  #         release_id: ${{ needs.create-release.outputs.release_id }}
  #       with:
  #         script: |
  #           github.rest.repos.updateRelease({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             release_id: process.env.release_id,
  #             draft: true,
  #             prerelease: false
  #           })
